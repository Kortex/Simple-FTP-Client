/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import connectors.FtpConnection;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.apache.commons.lang3.StringUtils;
import utils.Trace;

/**
 *
 * @author 'Αρης Κουρτέσας
 */
public class FtpDialog extends javax.swing.JFrame {

    FtpConnection ftpHandler = new FtpConnection();
    private boolean connected = false;
    private String lastKnownDir = null;
    private final JFrame rootFrame = (JFrame) SwingUtilities.getWindowAncestor(this);

    /**
     * Creates new form FtpDialog
     */
    public FtpDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserDialog = new javax.swing.JDialog();
        fileChooserPanel = new javax.swing.JPanel();
        uploadFileChooser = new javax.swing.JFileChooser();
        loginDialog = new javax.swing.JPanel();
        hostAddressLabel = new javax.swing.JLabel();
        portNumberLabel = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        hostAddressField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        portNumberSp = new javax.swing.JSpinner();
        loginBt = new javax.swing.JButton();
        passField = new javax.swing.JTextField();
        disconnectBt = new javax.swing.JButton();
        closeBt = new javax.swing.JButton();
        outputPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        commandPanel = new javax.swing.JPanel();
        fileDlLabel = new javax.swing.JLabel();
        fileDlText = new javax.swing.JTextField();
        fileDlBt = new javax.swing.JButton();
        uploadFileBt = new javax.swing.JButton();
        uploadFileLb = new javax.swing.JLabel();
        navigationPanel = new javax.swing.JPanel();
        cdDirLabel = new javax.swing.JLabel();
        cdDirText = new javax.swing.JTextField();
        cdDirBt = new javax.swing.JButton();
        backLabel = new javax.swing.JLabel();
        backBt = new javax.swing.JButton();
        forwardLabel = new javax.swing.JLabel();
        forwardBt = new javax.swing.JButton();
        rootLabel = new javax.swing.JLabel();
        rootBt = new javax.swing.JButton();

        fileChooserDialog.setSize(new java.awt.Dimension(650, 500));

        uploadFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileChooserPanelLayout = new javax.swing.GroupLayout(fileChooserPanel);
        fileChooserPanel.setLayout(fileChooserPanelLayout);
        fileChooserPanelLayout.setHorizontalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(uploadFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        fileChooserPanelLayout.setVerticalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(uploadFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fileChooserDialogLayout = new javax.swing.GroupLayout(fileChooserDialog.getContentPane());
        fileChooserDialog.getContentPane().setLayout(fileChooserDialogLayout);
        fileChooserDialogLayout.setHorizontalGroup(
            fileChooserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fileChooserDialogLayout.setVerticalGroup(
            fileChooserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java FTP Client ");
        setName("loginFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1100, 900));
        setSize(new java.awt.Dimension(1100, 900));

        loginDialog.setBorder(javax.swing.BorderFactory.createTitledBorder("Session"));

        hostAddressLabel.setText("Host address:");

        portNumberLabel.setText("Port number:");

        userNameLabel.setText("Username:");

        passwordLabel.setText("Password:");

        portNumberSp.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(21), null, null, Integer.valueOf(1)));

        loginBt.setText("Login");
        loginBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtActionPerformed(evt);
            }
        });

        disconnectBt.setText("Disconnect");
        disconnectBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog);
        loginDialog.setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hostAddressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hostAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(portNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portNumberSp, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginBt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(disconnectBt)
                .addContainerGap(104, Short.MAX_VALUE))
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostAddressLabel)
                    .addComponent(hostAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portNumberLabel)
                    .addComponent(portNumberSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel)
                    .addComponent(loginBt)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disconnectBt))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeBt.setText("Close");
        closeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtActionPerformed(evt);
            }
        });

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote server output"));

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addContainerGap())
        );

        commandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Command set"));
        commandPanel.setPreferredSize(new java.awt.Dimension(405, 130));

        fileDlLabel.setText("Select file to download:");

        fileDlBt.setText("Download");
        fileDlBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileDlBtActionPerformed(evt);
            }
        });

        uploadFileBt.setText("Upload");
        uploadFileBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileBtActionPerformed(evt);
            }
        });

        uploadFileLb.setText("Select file to upload:");

        javax.swing.GroupLayout commandPanelLayout = new javax.swing.GroupLayout(commandPanel);
        commandPanel.setLayout(commandPanelLayout);
        commandPanelLayout.setHorizontalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commandPanelLayout.createSequentialGroup()
                        .addComponent(uploadFileLb)
                        .addGap(161, 161, 161))
                    .addGroup(commandPanelLayout.createSequentialGroup()
                        .addComponent(fileDlLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileDlText, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadFileBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileDlBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        commandPanelLayout.setVerticalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileDlLabel)
                    .addComponent(fileDlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileDlBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadFileLb)
                    .addComponent(uploadFileBt))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        navigationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation Commands"));
        navigationPanel.setPreferredSize(new java.awt.Dimension(410, 220));

        cdDirLabel.setText("Change to another directory:");

        cdDirBt.setText("Change");
        cdDirBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdDirBtActionPerformed(evt);
            }
        });

        backLabel.setText("Go to back:");

        backBt.setText("Back");
        backBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtActionPerformed(evt);
            }
        });

        forwardLabel.setText("Go forward:");

        forwardBt.setText("Forward");
        forwardBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardBtActionPerformed(evt);
            }
        });

        rootLabel.setText("Go to root:");

        rootBt.setText("Root");
        rootBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navigationPanelLayout = new javax.swing.GroupLayout(navigationPanel);
        navigationPanel.setLayout(navigationPanelLayout);
        navigationPanelLayout.setHorizontalGroup(
            navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navigationPanelLayout.createSequentialGroup()
                        .addComponent(cdDirLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cdDirText, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backLabel)
                    .addComponent(forwardLabel)
                    .addComponent(rootLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cdDirBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(forwardBt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(rootBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        navigationPanelLayout.setVerticalGroup(
            navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cdDirLabel)
                    .addComponent(cdDirText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cdDirBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backLabel)
                    .addComponent(backBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forwardLabel)
                    .addComponent(forwardBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(navigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rootLabel)
                    .addComponent(rootBt))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeBt))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(navigationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(commandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginDialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(navigationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addComponent(closeBt)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtActionPerformed
        // TODO add your handling code here:
        if (connected) {
            try {
                ftpHandler.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
            Trace.trc("Closing connection and exiting program...");
            System.exit(0);
        } else {
            Trace.trc("Exiting program...");
            System.exit(0);
        }


    }//GEN-LAST:event_closeBtActionPerformed

    private void loginBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtActionPerformed

        String host = hostAddressField.getText();
        int port = (int) portNumberSp.getValue();
        String user = userNameField.getText();
        String pass = passField.getText();
        String hostIP = null;

        Trace.connectionFtp = true;

        InetAddress address = null;

        if (!connected) {
            try {
                address = InetAddress.getByName(host);;
                hostIP = StringUtils.substringAfter(address.toString(), "/");
                if (hostIP == null || hostIP.equals("127.0.0.1")) {
                    JOptionPane.showMessageDialog(rootFrame, "Host name not set",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (port == 0) {
                    JOptionPane.showMessageDialog(rootFrame, "Invalid port number",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
                if (Trace.connectionFtp) {
                    Trace.trc("Host IP address: " + hostIP);
                }
            } catch (UnknownHostException e) {
                JOptionPane.showMessageDialog(rootFrame, "Cannot resolve host address",
                        "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }

            try {
                if (address != null && port != 0 && user != null && pass != null) {
                    connected = ftpHandler.doConnect(hostIP, port, user, pass);
                    if (!connected) {
                        JOptionPane.showMessageDialog(rootFrame,
                                "Problem iniating connection to the FTP server, please check your login credentials",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                if (Trace.connectionFtp) {
                    Trace.trc("Attempting to list the remote directory...");
                }
                String dirList = ftpHandler.list();
                lastKnownDir = ftpHandler.pwd();
                outputTextArea.setText(dirList);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Already connected to a FTP server, cannot reconnect!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_loginBtActionPerformed

    private void cdDirBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdDirBtActionPerformed

        Trace.connectionFtp = true;
        boolean hasChangedDir = false;

        if (connected) {
            if (!cdDirText.getText().equals("")) {
                if (Trace.connectionFtp) {
                    Trace.trc("Changing to new directory: "
                            + cdDirText.getText().trim());
                }
                try {
                    hasChangedDir = ftpHandler.cwd(cdDirText.getText().trim());

                    if (hasChangedDir) {
                        lastKnownDir = ftpHandler.pwd();
                        String dirList = ftpHandler.list();
                        outputTextArea.setText(dirList);
                        cdDirText.setText("");
                    } else {
                        JOptionPane.showMessageDialog(rootFrame,
                                "Non existing directory, cannot CWD!", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                cdDirText.setText("");
                JOptionPane.showMessageDialog(rootFrame,
                        "No directory has been selected, cannot CWD!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot disconnect!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cdDirBtActionPerformed

    private void fileDlBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDlBtActionPerformed

        Trace.connectionFtp = true;

        if (connected) {
            boolean hasDownloaded = false;
            if (!fileDlText.getText().equals("")) {
                if (Trace.connectionFtp) {
                    Trace.trc("Download file: "
                            + fileDlText.getText().trim());
                }
                try {
                    hasDownloaded = ftpHandler.retr(fileDlText.getText().trim());
                    if (hasDownloaded) {
                        JOptionPane.showMessageDialog(rootFrame, "File "
                                + fileDlText.getText().trim() + " was downloaded successfully");
                        fileDlText.setText("");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(rootFrame,
                        "No file to download has been selected!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot disconnect!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fileDlBtActionPerformed

    private void disconnectBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtActionPerformed

        Trace.connectionFtp = true;

        if (connected) {
            if (Trace.connectionFtp) {
                Trace.trc("Disconnecting from server: " + hostAddressField.getText());
            }
            fileDlText.setText("");
            outputTextArea.setText("");
            hostAddressField.setText("");
            userNameField.setText("");
            passField.setText("");

            try {
                ftpHandler.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }

            connected = false;
            JOptionPane.showMessageDialog(rootFrame, "Disconnected from server.");
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot disconnect!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_disconnectBtActionPerformed

    private void uploadFileBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileBtActionPerformed

        fileChooserDialog.setVisible(true);
        fileChooserDialog.setSize(650, 500);
        fileChooserDialog.pack();

    }//GEN-LAST:event_uploadFileBtActionPerformed

    private void uploadFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileChooserActionPerformed

        File selectedFile = uploadFileChooser.getSelectedFile();
        boolean hasUploaded = false;

        Trace.trc("File to upload: " + selectedFile.getName());

        FileInputStream input = null;

        if (connected) {
            if (!selectedFile.equals(null)) {
                try {
                    input = new FileInputStream(selectedFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                try {
                    hasUploaded = ftpHandler.stor(input, selectedFile.getName());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(rootFrame,
                        "No file to upload has been chosen!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }

            if (!hasUploaded) {
                JOptionPane.showMessageDialog(rootFrame,
                        "Error uploading file to the remote server!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot upload file!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_uploadFileChooserActionPerformed

    private void backBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtActionPerformed

        Trace.connectionFtp = true;
        String currentDir = null;

        if (connected) {
            if (Trace.connectionFtp) {
                Trace.trc("Going back to previous directory");
            }
            try {
                currentDir = ftpHandler.pwd();
                lastKnownDir = currentDir;

                if (currentDir.equals("/")) {
                    JOptionPane.showMessageDialog(rootFrame,
                            "Cannot go back, you are in the root directory.");
                } else {
                    ftpHandler.cwd("..");
                    ftpHandler.pwd();
                    String dirList = ftpHandler.list();
                    outputTextArea.setText(dirList);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot change directories!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_backBtActionPerformed

    private void forwardBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardBtActionPerformed

        String currentDir = null;

        if (connected) {
            if (Trace.connectionFtp) {
                Trace.trc("Going forward to previous directory");
            }
            try {
                currentDir = ftpHandler.pwd();

                if (currentDir.equals("/")) {
                    JOptionPane.showMessageDialog(rootFrame,
                            "Cannot go back, you are in the root directory.");
                } else if (currentDir.equals(lastKnownDir)) {
                    JOptionPane.showMessageDialog(rootFrame,
                            "Cannot go forward, "
                            + "this is the last know directory you visited.");
                } else {
                    ftpHandler.cwd(lastKnownDir);
                    currentDir = ftpHandler.pwd();
                    String dirList = ftpHandler.list();
                    outputTextArea.setText(dirList);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot change directories!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_forwardBtActionPerformed

    private void rootBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootBtActionPerformed

        final char DIR_LIMITER = '/';
        StringBuilder sb = new StringBuilder();

        if (connected) {
            if (Trace.connectionFtp) {
                Trace.trc("Returning to root directory");
            }
            try {
                String currentDir = ftpHandler.pwd();

                if (!currentDir.equals("/")) {

                    int counter = 0;

                    for (int i = 0; i < currentDir.length(); i++) {
                        if (currentDir.charAt(i) == DIR_LIMITER) {
                            counter++;
                        }
                    }
                    for (int i = 0; i < counter; i++) {
                        sb.append("../");
                    }
                    ftpHandler.cwd(sb.toString());
                    currentDir = ftpHandler.pwd();
                    String dirList = ftpHandler.list();
                    outputTextArea.setText(dirList);
                } else {
                    JOptionPane.showMessageDialog(rootFrame,
                            "Cannot go to root, you already here.");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            JOptionPane.showMessageDialog(rootFrame,
                    "Not connected to a server, cannot disconnect!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rootBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FtpDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FtpDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FtpDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FtpDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FtpDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBt;
    private javax.swing.JLabel backLabel;
    private javax.swing.JButton cdDirBt;
    private javax.swing.JLabel cdDirLabel;
    private javax.swing.JTextField cdDirText;
    private javax.swing.JButton closeBt;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JButton disconnectBt;
    private javax.swing.JDialog fileChooserDialog;
    private javax.swing.JPanel fileChooserPanel;
    private javax.swing.JButton fileDlBt;
    private javax.swing.JLabel fileDlLabel;
    private javax.swing.JTextField fileDlText;
    private javax.swing.JButton forwardBt;
    private javax.swing.JLabel forwardLabel;
    private javax.swing.JTextField hostAddressField;
    private javax.swing.JLabel hostAddressLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginBt;
    private javax.swing.JPanel loginDialog;
    private javax.swing.JPanel navigationPanel;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JTextField passField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel portNumberLabel;
    private javax.swing.JSpinner portNumberSp;
    private javax.swing.JButton rootBt;
    private javax.swing.JLabel rootLabel;
    private javax.swing.JButton uploadFileBt;
    private javax.swing.JFileChooser uploadFileChooser;
    private javax.swing.JLabel uploadFileLb;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
